from django.shortcuts import render
import sympy as sp
import math

# ... (previous code) ...
# nama_aplikasi/views.py
import math
from django.shortcuts import render
from pytube import YouTube

def hitung_minus_b(m_awal, m_akhir, n):
    # Hitung nilai minus b berdasarkan rumus bunga majemuk
    b = (m_akhir / m_awal) ** (1 / n) - 1
    return b

def hitung_minus_n(m_awal, m_akhir, b):
    # Hitung nilai minus n berdasarkan rumus bunga majemuk
    n = math.log(m_akhir / m_awal) / math.log(1 + b)
    return n

def bunga_majemuk(request):
    if request.method == 'POST':
        pilihan = request.POST['pilihan']
        m_awal = float(request.POST['m_awal'])
        m_akhir = float(request.POST['m_akhir'])
        n = int(request.POST['n'])
        b = float(request.POST['b'])

        if pilihan == 'modal_awal':
            m_awal = m_akhir / (1 + b)**n
        elif pilihan == 'modal_akhir':
            m_akhir = m_awal * (1 + b)**n
        elif pilihan == 'minus_b':
            b = hitung_minus_b(m_awal, m_akhir, n)
        elif pilihan == 'minus_n':
            n = hitung_minus_n(m_awal, m_akhir, b)

        return render(request, 'hasil_bunga_majemuk.html', {
            'm_awal': m_awal,
            'm_akhir': m_akhir,
            'n': n,
            'b': b,
        })
    
    return render(request, 'bunga_majemuk.html')

def compose_functions(request):
    if request.method == 'POST':
        f_input = request.POST['f_input']
        g_input = request.POST['g_input']

        x = sympy.symbols('x')
        f = sympy.sympify(f_input)
        g = sympy.sympify(g_input)

        f_g = sympy.compose(f, g)
        g_f = sympy.compose(g, f)

        context = {
            'f': f,
            'g': g,
            'f_g': f_g,
            'g_f': g_f,
        }
        return render(request, 'result.html', context)

    return render(request, 'compose_functions.html')
    
def download_video(request):
    resolutions = ['360p', '720p', '1080p', '1440p', '2160p']

    if request.method == 'POST':
        youtube_link = request.POST.get('youtube_link')
        resolution = request.POST.get('resolution')

        if youtube_link and resolution:
            try:
                yt = YouTube(youtube_link)
                streams = yt.streams.filter(res=resolution)
                title = yt.title
                context = {
                    'title': title,
                    'streams': streams,
                    'resolutions': resolutions,
                    'selected_resolution': resolution,
                }
            except Exception as e:
                context = {
                    'error_message': 'Error: ' + str(e),
                    'resolutions': resolutions,
                }
        else:
            context = {
                'error_message': 'Please enter a YouTube link and select a resolution.',
                'resolutions': resolutions,
            }
    else:
        context = {
            'resolutions': resolutions,
        }

    return render(request, 'download_video.html', context)
    
def download(request):
    if request.method == 'POST':
        youtube_link = request.POST.get('youtube_link')
        if youtube_link:
            try:
                yt = YouTube(youtube_link)
                context = {
                    'title': yt.title,
                    'streams': yt.streams.filter(only_audio=True),
                }
            except Exception as e:
                context = {
                    'error_message': 'Error: ' + str(e),
                }
        else:
            context = {
                'error_message': 'Please enter a YouTube link.',
            }
    else:
        context = {}
    return render(request, 'download.html', context)
    
from django.shortcuts import render
import sympy as sp
import math

from django.shortcuts import render
import math

from django.shortcuts import render
import sympy as sp
import math

def complex_operations(request):
    if request.method == 'POST':
        pilihan = request.POST['pilihan']

        if pilihan == 'custom_kartesius':
            # Lakukan konversi dari hasil sebelumnya (kartesius) ke custom kartesius
            # Misalnya, ambil nilai a dan b dari hasil kartesius
            real_a = request.POST.get('real_a', 0)
            imag_b = request.POST.get('imag_b', 0)

            # Lakukan logika konversi custom kartesius di sini (misalnya, gabungkan nilai a dan b)
            custom_kartesius_result = f'Custom Kartesius: {real_a} + {imag_b}i'
            context = {
                'custom_kartesius_result': custom_kartesius_result,
            }
            return render(request, 'complex_operations.html', context)

        elif pilihan == 'custom_polar':
            # Lakukan konversi dari hasil sebelumnya (polar) ke custom polar
            # Misalnya, ambil nilai r dan theta dari hasil polar
            r = request.POST.get('r', 0)
            theta_degrees = request.POST.get('theta', 0)

            # Lakukan logika konversi custom polar di sini (misalnya, tampilkan nilai r dan theta)
            custom_polar_result = f'Custom Polar: {r} * (cos({theta_degrees} degrees) + sin({theta_degrees} degrees) * i)'
            context = {
                'custom_polar_result': custom_polar_result,
            }
            return render(request, 'complex_operations.html', context)

        elif pilihan == 'custom_eksponen':
            # Lakukan konversi dari hasil sebelumnya (eksponen) ke custom eksponen
            # Misalnya, ambil nilai r dan theta dari hasil eksponen
            r = request.POST.get('exp_r', 0)
            theta_degrees = request.POST.get('exp_theta', 0)

            # Lakukan logika konversi custom eksponen di sini (misalnya, tampilkan nilai r dan theta)
            custom_eksponen_result = f'Custom Eksponen: {r} * exp({theta_degrees} * i)'
            context = {
                'custom_eksponen_result': custom_eksponen_result,
            }
            return render(request, 'complex_operations.html', context)

        else:
            real_a = request.POST.get('real_a', 0)
            imag_b = request.POST.get('imag_b', 0)
            r = request.POST.get('r', 0)
            theta_degrees = request.POST.get('theta', 0)
            theta_radians = math.radians(float(theta_degrees))

            if pilihan == 'kartesius':
                # Membuat bilangan kompleks berdasarkan bagian real dan imajiner
                z = f'{real_a} + {imag_b}i'
                context = {
                    'kartesius_result': z,
                }
            elif pilihan == 'polar':
                # Konversi ke bentuk polar
                z = f'{r} * (cos({theta_degrees} degrees) + sin({theta_degrees} degrees) * i)'
                context = {
                    'polar_result': z,
                }
            elif pilihan == 'eksponen':
                # Konversi ke bentuk eksponen
                z = f'{r} * exp({theta_degrees} * i)'
                context = {
                    'eksponen_result': z,
                }
            else:
                result_str = 'Tidak ada hasil sebelumnya yang valid untuk konversi custom.'
                context = {
                    'result_str': result_str,
                }

            return render(request, 'complex_operations.html', context)

    return render(request, 'complex_operations.html')



def bunga_tunggal(request):
    if request.method == 'POST':
        pilihan = request.POST['pilihan']
        m_awal = float(request.POST['m_awal'])
        m_akhir = float(request.POST['m_akhir'])
        n = int(request.POST['n'])
        b = float(request.POST['b'])

        if pilihan == 'modal_awal':
            m_awal = m_akhir / (1 + n * b)
        elif pilihan == 'modal_akhir':
            m_akhir = m_awal * (1 + n * b)
        elif pilihan == 'jangka_waktu':
            n = (m_akhir / m_awal - 1) / b
        elif pilihan == 'tingkat_bunga':
            b = (m_akhir / m_awal - 1) / n

        return render(request, 'hasil_bunga_tunggal.html', {
            'm_awal': m_awal,
            'm_akhir': m_akhir,
            'n': n,
            'b': b,
        })

    return render(request, 'bunga-tunggal.html')
    
def bunga_majemuk(request):
    if request.method == 'POST':
        pilihan = request.POST['pilihan']
        m_awal = float(request.POST['m_awal'])
        m_akhir = float(request.POST['m_akhir'])
        n = int(request.POST['n'])
        b = float(request.POST['b'])

        if pilihan == 'modal_awal':
            m_awal = m_akhir / (1 + n * b)
        elif pilihan == 'modal_akhir':
            m_akhir = m_awal * (1 + n * b)
        elif pilihan == 'jangka_waktu':
            n = (m_akhir / m_awal - 1) / b
        elif pilihan == 'tingkat_bunga':
            b = (m_akhir / m_awal - 1) / n

        return render(request, 'hasil_bunga_majemuk.html', {
            'm_awal': m_awal,
            'm_akhir': m_akhir,
            'n': n,
            'b': b,
        })

    return render(request, 'bunga_majemuk.html')